extern crate glutin_window;
extern crate graphics;
extern crate opengl_graphics;
extern crate piston;

use glutin_window::GlutinWindow as Window;
use opengl_graphics::{GlGraphics, OpenGL};
use piston::event_loop::{EventSettings, Events};
use piston::input::{*};
use piston::window::WindowSettings;

enum Direction {
    UP,
    DOWN,
    LEFT,
    RIGHT,
}

struct Point {
    x: f64,
    y: f64,
}

pub struct App {
    gl: GlGraphics, // OpenGL drawing backend.
    rotation: f64,  // Rotation for the square.
    segments: Vec<Point>,
    direction: Direction
}

impl App {
    fn render(&mut self, args: &RenderArgs) {
        use graphics::*;

        const GREEN: [f32; 4] = [0.0, 1.0, 0.0, 1.0];
        const RED: [f32; 4] = [1.0, 0.0, 0.0, 1.0];

        let square = rectangle::square(0.0, 0.0, 10.0);
        let (x, y) = (args.window_size[0] / 2.0, args.window_size[1] / 2.0);

        self.gl.draw(args.viewport(), |c, gl| {
            // Clear the screen.
            clear(GREEN, gl);

            for seg in self.segments.iter() {
                let transform = c
                    .transform
                    .trans(seg.x, seg.y);


                rectangle(RED, square, transform, gl);
            }
        });
    }

    fn handleInput(&mut self, key: &Key) {
        match key {
            Key::W => self.direction = Direction::UP,
            Key::S => self.direction = Direction::DOWN,
            Key::A => self.direction = Direction::LEFT,
            Key::D => self.direction = Direction::RIGHT,
            _ => (),
        }
    }

    fn update(&mut self, args: &UpdateArgs) {
        let Point {mut x,mut y} = self.segments[0];
        

        let movDelta = 5.0;

        match self.direction {
            Direction::UP => y -= movDelta,
            Direction::DOWN => y += movDelta,
            Direction::LEFT => x -= movDelta,
            Direction::RIGHT => x += movDelta,
        }

        self.segments.push(Point {
            x,
            y,
        });

        self.segments.rotate_right(1);
        self.segments.pop();

    }
}

fn main() {
    // Change this to OpenGL::V2_1 if not working.
    let opengl = OpenGL::V3_2;

    // Create a Glutin window.
    let mut window: Window = WindowSettings::new("RuSnake", [500, 500])
        .graphics_api(opengl)
        .exit_on_esc(true)
        .build()
        .unwrap();

    // Create a new game and run it.
    let mut app = App {
        gl: GlGraphics::new(opengl),
        rotation: 0.0,
        segments: vec![
            Point {
                x: 250.0,
                y: 250.0
            },
            Point {
                x: 250.0,
                y: 255.0
            }
        ],
        direction: Direction::UP,
    };

    let mut events = Events::new(EventSettings::new());
    while let Some(e) = events.next(&mut window) {
        if let Some(args) = e.render_args() {
            app.render(&args);
        }

        if let Some(args) = e.update_args() {
            app.update(&args);
        }

        
        if let Some(Button::Keyboard(key)) = e.press_args() {
            app.handleInput(&key);
        }
    }
}

